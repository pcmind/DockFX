plugins {
	id "com.jfrog.bintray" version "1.8.3"
	id "com.diffplug.gradle.spotless" version "3.1.0"
	id "de.undercouch.download" version "3.4.3"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'


project.ext.masterfile = (new File(projectDir,'/gradle/master.gradle')).getAbsolutePath()

// Attempts to download master gradle file
if(!hasProperty('do_not_update_master_file'))
try {
	download {
		src 'https://github.com/ClearControl/master/blob/master/master.gradle?raw=true'
		dest project.ext.masterfile
		overwrite true
		onlyIfModified true
		tempAndMove true
	}
}
catch (Throwable e)
{
}

apply from: project.ext.masterfile

//***********************************************************************************
// JAVA CODE BUILDING

sourceSets
{
	main
	{
		java
		{ srcDir 'src/main/java' }
		resources
		{ srcDir 'src/main/resources' }
	}
	test
	{
		java
		{ srcDir 'src/test/java' }
		resources
		{ srcDir 'src/test/resources' }
	}
}


sourceCompatibility = 11
targetCompatibility = 11


test
{
	testLogging.showStandardStreams = true
	testLogging
	{ events "passed", "skipped", "failed" }

	exclude '**/demo/**'
	exclude '**/run/**'

	maxHeapSize = "4G"
}

dependencies
{
	implementation 'org.openjfx:javafx-controls:13.0.2'
	implementation 'org.openjfx:javafx-fxml:13.0.2'
	implementation 'org.openjfx:javafx-web:13.0.2'
}

repositories
{
	// Main repos:
	mavenLocal()
	mavenCentral()
	jcenter()
}


task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}


//***********************************************************************************
// PUBLISHING

group   = project.ext.groupname
version = project.ext.versionsMap[project.name]

artifacts
		{
			archives sourcesJar
			archives javadocJar
		}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
			artifact sourcesJar { classifier "sources" }
		}
	}
}












